#include "ooo_cpu.h"

#define TABLE_SIZE 16384
#define PRIME 16381
#define MAX_COUNTER 3
#define MIN_COUNTER 0
#define ROW_SIZE 2
#define MAX_ROW TABLE_SIZE/2

int table[NUM_CPUS][TABLE_SIZE];

int last_outcome[NUM_CPUS];

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << " Branch predictor" << endl;

    last_outcome[cpu] = 0;

    for(int i = 0; i < TABLE_SIZE; i++)
        table[cpu][i] = 0;
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{
    uint32_t hash = ip % PRIME; // 32 bit addr
    uint8_t prediction = 0;

    //---- FILL THE PART BELOW THIS ----//
    // TODO: to fix indexing

    uint32_t index = (hash % MAX_ROW)*ROW_SIZE;

    if (last_outcome[cpu] == 0) {    // if last outcome NT, use sat counter 0
        if (table[cpu][index] >= 2) {
            prediction = 1; // predict taken if counter 2 or 3
        } else {
            prediction = 0; // predict not taken if counter 0 or 1
        }
    } else {    // if last outcome T, use sat counter 1
        if (table[cpu][index+1] >= 2) {
            prediction = 1; // predict taken if counter 2 or 3
        } else {
            prediction = 0; // predict not taken if counter 0 or 1
        }
    }
    //---- FILL THE PART ABOVE THIS ----//
	
    return prediction;
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
    uint32_t hash = ip % PRIME;
    //---- FILL THE PART BELOW THIS ----//
    uint32_t index = (hash % MAX_ROW)*ROW_SIZE;

    if (taken == 1) {    // if outcome is T, increment appropriate counter
        if (last_outcome[cpu] == 0) {
            if (table[cpu][index] < MAX_COUNTER) {
                ++table[cpu][index];
            }
        } else {
            if (table[cpu][index+1] < MAX_COUNTER) {
                ++table[cpu][index+1];
            }
        }
    } else if (taken == 0) {    // if outcome is NT, increment appropriate counter
        if (last_outcome[cpu] == 0) {
            if (table[cpu][index] > MIN_COUNTER) {
                --table[cpu][index];
            }
        } else {
            if (table[cpu][index+1] > MIN_COUNTER) {
                --table[cpu][index+1];
            }
        }
    }

    last_outcome[cpu] = taken;   // update outcome
    //---- FILL THE PART ABOVE THIS ----//
    return;
}
