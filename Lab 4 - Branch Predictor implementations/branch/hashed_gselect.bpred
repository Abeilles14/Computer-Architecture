#include "ooo_cpu.h"

#define TABLE_SIZE 16384
#define PRIME 16381
#define MAX_COUNTER 3
#define MIN_COUNTER 0
#define MAX_ROW 256
#define ROW_SIZE 64

int table[NUM_CPUS][TABLE_SIZE];
int history[NUM_CPUS];    // 32 bits  

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << "Branch predictor" << endl;
    history[cpu] = 0;

    for(int i = 0; i < TABLE_SIZE; i++)
        table[cpu][i] = 0;
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{
    uint32_t hash = ip % PRIME;
    uint8_t prediction = 0;

    //---- FILL THE PART BELOW THIS ----//
    uint32_t hash_xor = hash ^= history[cpu];   //((hash | history) & (~hash | ~history));    // XOR history bits and hash
    
    uint32_t index = (hash_xor % MAX_ROW)*ROW_SIZE; //hash_xor/ROW_SIZE;         // select table row
    
    uint32_t col_sel = hash_xor % ROW_SIZE;    // select row's sat counter col
    uint32_t history_sel = col_sel/2;   // get history bit for these 2 sat counters

    uint32_t counter_sel = history_sel*2;   // selects 1st sat counter in 2 entry col


    // create mask, apply to history to extract corresponding bit to table col sat counters
    int last_outcome = (history[cpu] & ( 1 << history_sel )) >> history_sel;

    if (last_outcome == 0) {    // if last outcome NT, use sat counter 0
        if (table[cpu][index + counter_sel] >= 2) {
            prediction = 1; // predict taken if counter 2 or 3
        } else {
            prediction = 0; // predict not taken if counter 0 or 1
        }
    } else {    // if last outcome T, use sat counter 1
        if (table[cpu][index + counter_sel + 1] >= 2) {
            prediction = 1; // predict taken if counter 2 or 3
        } else {
            prediction = 0; // predict not taken if counter 0 or 1
        }
    }

    //---- FILL THE PART ABOVE THIS ----//
	
    return prediction;
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
    uint32_t hash = ip % PRIME;

    //---- FILL THE PART BELOW THIS ----//
    uint32_t hash_xor = hash ^= history[cpu];//((hash | history) & (~hash | ~history));    // XOR history bits and hash
    
    uint32_t index = (hash_xor % MAX_ROW)*ROW_SIZE; //hash_xor/ROW_SIZE;         // select table row
    
    uint32_t col_sel = hash_xor % ROW_SIZE;    // select row's sat counter col
    uint32_t history_sel = col_sel/2;   // get history bit for these 2 sat counters

    uint32_t counter_sel = history_sel*2;   // selects 1st sat counter in 2 entry col

    // create mask, apply to history to extract corresponding bit to table col sat counters
    int last_outcome = (history[cpu] & (1 << history_sel)) >> history_sel;


    if (taken == 1) {    // if outcome is T, increment appropriate counter
        if (last_outcome == 0) {
            if (table[cpu][index + counter_sel] < MAX_COUNTER) {
                ++table[cpu][index + counter_sel];
            }

            history[cpu] ^= 1 << history_sel;    // outcome changed, toggle bit
        } else {
            if (table[cpu][index + counter_sel + 1] < MAX_COUNTER) {
                ++table[cpu][index + counter_sel + 1];
            }
        }

    } else if (taken == 0) {    // if outcome is NT, increment appropriate counter
        if (last_outcome == 0) {
            if (table[cpu][index + counter_sel] > MIN_COUNTER) {
                --table[cpu][index + counter_sel];
            }
        } else {
            if (table[cpu][index + counter_sel + 1] > MIN_COUNTER) {
                --table[cpu][index + counter_sel + 1];
            }

            history[cpu] ^= 1 << history_sel;    // outcome changed, toggle bit
        }
    }

    //---- FILL THE PART ABOVE THIS ----//
    return;
}
