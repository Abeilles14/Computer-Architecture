//--- Implementing the Dynamic Insertion Policy ---//

#include "cache.h"
#include <cstdlib>
#include <math.h>

// CONSTANTS
#define NUM_SAMPLE 64   // 64 sample sets
#define PSEL_WIDTH 11
#define PSEL_MAX ((1<<PSEL_WIDTH)-1)
#define PSEL_MIN 0
#define PSEL_THRS PSEL_MAX/2

float THROTTLE = 0.05;    // epsilon 5%
unsigned rand_sets[NUM_SAMPLE*2];  // randomized LRU & BIP sample sets

// PSEL COUNTER
uint32_t psel_counter = PSEL_THRS; // start at mid range

void randomize_sample_sets()
{
    // randomly selected sampler sets
    srand((unsigned) time(NULL)); // use time as seed
    int regenerate = 0;

    for (int i=0; i<NUM_SAMPLE*2; i++) {
        do {
            regenerate = 0;
            rand_sets[i] = rand() % (LLC_SET-1);  // assign random number from [0, NUM_SET)

            for (int j=0; j<i; j++) {
                // if set already allocated
                if (rand_sets[i] == rand_sets[j]) {
                    regenerate = 1;
                    break;
                }
            }
        } while (regenerate);
    }
}

// first 64 sets = LRU
int isLRUSet(uint32_t set)
{
    for (uint32_t i=0; i<NUM_SAMPLE; i++)
        if (rand_sets[i] == set)
            return 1;

    return 0;
}

// last 64 sets = BIP
int isBIPSet(uint32_t set)
{
    for (uint32_t i=NUM_SAMPLE; i<NUM_SAMPLE*2; i++)
        if (rand_sets[i] == set)
            return 1;

    return 0;
}

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    randomize_sample_sets();
}

// find replacement victim
// evict block in LRU position
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // baseline LRU
    uint32_t way = 0;

    // fill invalid line first
    for (way=0; way<NUM_WAY; way++) {
        if (block[set][way].valid == false) {
            break;
        }
    }

    // choose LRU as victim to evict
    // if way = last way
    if (way == NUM_WAY) {
        for (way=0; way<NUM_WAY; way++) {
            // move each block down
            if (block[set][way].lru == NUM_WAY-1) {
                break;
            }
        }
    }

    if (way == NUM_WAY) {
        // cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }

    return way;
}

// called on every cache hit and cache fill
// move each block down
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    // promote to MRU regardless on hit
    if (hit) {
        lru_update(set, way);
    }
    // check whether LRU, BIP, or Main set accessed
    // if set in rand [0,64) or below PSEL sat, use LRU
    else {
        if (isLRUSet(set)) {
            // insert at MRU regardless of hit or miss
            lru_update(set, way);

            // inc PSEL on miss
            if (psel_counter < PSEL_MAX) {
                ++psel_counter;
            }
        }
        // BIP insertion
        // if set in rand [64,128) or above PSEL sat, use BIP
        else if (isBIPSet(set)) {
            srand((unsigned) time(NULL)); // use time as seed
            float r = (float) rand()/RAND_MAX;
                
            if (r < THROTTLE) {
                // insert at MRU
                lru_update(set, way);
            } else {
                // insert at LRU
                block[set][way].lru = NUM_WAY-1;
            }

            // dec PSEL on miss
            if (psel_counter > 0) {
                --psel_counter;
            }
        }
        // Main set accessed, choose policy according to PSEL
        else {
            // use LRU for Main sets
            if (psel_counter < PSEL_THRS) {
                // update lru replacement state
                lru_update(set, way);
            }
            // use BIP for Main sets
            else if (psel_counter >= PSEL_THRS) {
                // first randomize a number and compare to bimodal throttle eps
                float r = (float) rand()/RAND_MAX;
                if (r < THROTTLE) {
                    lru_update(set, way);
                } else {
                    //LIP, insert at LRU
                    block[set][way].lru = NUM_WAY-1; // insert LRU position
                }
            }
            else {
                assert(0);
            }
        }
    }
}

void CACHE::llc_replacement_final_stats()
{

}
