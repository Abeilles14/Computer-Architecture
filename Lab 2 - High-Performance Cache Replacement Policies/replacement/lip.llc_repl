//--- Implementing the LRU Insertion Policy ---//

#include "cache.h"


// initialize replacement state
void CACHE::llc_initialize_replacement()
{

}

// find replacement victim
// evict block in LRU position
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    // baseline LRU
    uint32_t way = 0;

    // if any invalid lines, evict invalid line first
    for (way=0; way<NUM_WAY; way++) {
        // victim way = invalid block
        if (block[set][way].valid == false) {
            // DP ( if (warmup_complete[cpu]) {
            // cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " invalid set: " << set << " way: " << way;
            // cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
            // cout << dec << " lru: " << block[set][way].lru << endl;
            // });
            break;
        }
    }

    // choose LRU as victim to evict
    // if way = last way
    if (way == NUM_WAY) {
        for (way=0; way<NUM_WAY; way++) {
            // move each block down
            if (block[set][way].lru == NUM_WAY-1) {
                // DP ( if (warmup_complete[cpu]) {
                // cout << "[" << NAME << "] " << __func__ << " instr_id: " << instr_id << " replace set: " << set << " way: " << way;
                // cout << hex << " address: " << (full_addr>>LOG2_BLOCK_SIZE) << " victim address: " << block[set][way].address << " data: " << block[set][way].data;
                // cout << dec << " lru: " << block[set][way].lru << endl;
                // });
                break;
            }
        }
    }

    if (way == NUM_WAY) {
        // cerr << "[" << NAME << "] " << __func__ << " no victim! set: " << set << endl;
        assert(0);
    }

    return way;
}

// called on every cache hit and cache fill
// if LRU block hit, move to MRU position
// move each block down
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    // update replacement state
    if (hit) {
        // if cache hit, promote to MRU
        lru_update(set, way);
    } else {
        // if cache miss, insert at LRU
        block[set][way].lru = NUM_WAY-1; // LRU position
    }
}

void CACHE::llc_replacement_final_stats()
{

}
